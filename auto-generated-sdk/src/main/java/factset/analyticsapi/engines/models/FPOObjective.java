/*
 * Engines API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package factset.analyticsapi.engines.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import factset.analyticsapi.engines.JSON;


/**
 * FPOObjective
 */
@JsonPropertyOrder({
  FPOObjective.JSON_PROPERTY_ACTIVE,
  FPOObjective.JSON_PROPERTY_TERMS
})
@javax.annotation.Generated(value = "CustomJavaClientCodegen")
public class FPOObjective implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private String active;

  /**
   * Gets or Sets inner
   */
  public enum InnerEnum {
    DISABLE("Disable"),
    
    ENABLE("Enable");

    private String value;

    InnerEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InnerEnum fromValue(String value) {
      for (InnerEnum b : InnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TERMS = "terms";
  private java.util.Map<String, InnerEnum> terms = null;


  public FPOObjective active(String active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getActive() {
    return active;
  }


  public void setActive(String active) {
    this.active = active;
  }


  public FPOObjective terms(java.util.Map<String, InnerEnum> terms) {
    this.terms = terms;
    return this;
  }

  public FPOObjective putTermsItem(String key, InnerEnum termsItem) {
    if (this.terms == null) {
      this.terms = new java.util.HashMap<String, InnerEnum>();
    }
    this.terms.put(key, termsItem);
    return this;
  }

   /**
   * Get terms
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TERMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public java.util.Map<String, InnerEnum> getTerms() {
    return terms;
  }


  public void setTerms(java.util.Map<String, InnerEnum> terms) {
    this.terms = terms;
  }


  /**
   * Return true if this FPOObjective object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FPOObjective fpOObjective = (FPOObjective) o;
    return Objects.equals(this.active, fpOObjective.active) &&
        Objects.equals(this.terms, fpOObjective.terms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, terms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FPOObjective {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

