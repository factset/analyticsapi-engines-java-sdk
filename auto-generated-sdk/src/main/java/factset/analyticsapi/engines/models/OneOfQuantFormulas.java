/*
 * Engines API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
 * Contact: api@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package factset.analyticsapi.engines.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import factset.analyticsapi.engines.models.QuantAllUniversalScreenParameters;
import factset.analyticsapi.engines.models.QuantFqlExpression;
import factset.analyticsapi.engines.models.QuantScreeningExpression;
import factset.analyticsapi.engines.models.QuantUniversalScreenParameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import factset.analyticsapi.engines.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import factset.analyticsapi.engines.JSON;

@javax.annotation.Generated(value = "CustomJavaClientCodegen")
@JsonDeserialize(using = OneOfQuantFormulas.OneOfQuantFormulasDeserializer.class)
@JsonSerialize(using = OneOfQuantFormulas.OneOfQuantFormulasSerializer.class)
public class OneOfQuantFormulas extends AbstractOpenApiSchema implements Serializable {
    private static final Logger log = Logger.getLogger(OneOfQuantFormulas.class.getName());

    public static class OneOfQuantFormulasSerializer extends StdSerializer<OneOfQuantFormulas> {
        public OneOfQuantFormulasSerializer(Class<OneOfQuantFormulas> t) {
            super(t);
        }

        public OneOfQuantFormulasSerializer() {
            this(null);
        }

        @Override
        public void serialize(OneOfQuantFormulas value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class OneOfQuantFormulasDeserializer extends StdDeserializer<OneOfQuantFormulas> {
        public OneOfQuantFormulasDeserializer() {
            this(OneOfQuantFormulas.class);
        }

        public OneOfQuantFormulasDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public OneOfQuantFormulas deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize QuantAllUniversalScreenParameters
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (QuantAllUniversalScreenParameters.class.equals(Integer.class) || QuantAllUniversalScreenParameters.class.equals(Long.class) || QuantAllUniversalScreenParameters.class.equals(Float.class) || QuantAllUniversalScreenParameters.class.equals(Double.class) || QuantAllUniversalScreenParameters.class.equals(Boolean.class) || QuantAllUniversalScreenParameters.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((QuantAllUniversalScreenParameters.class.equals(Integer.class) || QuantAllUniversalScreenParameters.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((QuantAllUniversalScreenParameters.class.equals(Float.class) || QuantAllUniversalScreenParameters.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (QuantAllUniversalScreenParameters.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (QuantAllUniversalScreenParameters.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(QuantAllUniversalScreenParameters.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'QuantAllUniversalScreenParameters'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'QuantAllUniversalScreenParameters'", e);
            }

            // deserialize QuantFqlExpression
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (QuantFqlExpression.class.equals(Integer.class) || QuantFqlExpression.class.equals(Long.class) || QuantFqlExpression.class.equals(Float.class) || QuantFqlExpression.class.equals(Double.class) || QuantFqlExpression.class.equals(Boolean.class) || QuantFqlExpression.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((QuantFqlExpression.class.equals(Integer.class) || QuantFqlExpression.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((QuantFqlExpression.class.equals(Float.class) || QuantFqlExpression.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (QuantFqlExpression.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (QuantFqlExpression.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(QuantFqlExpression.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'QuantFqlExpression'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'QuantFqlExpression'", e);
            }

            // deserialize QuantScreeningExpression
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (QuantScreeningExpression.class.equals(Integer.class) || QuantScreeningExpression.class.equals(Long.class) || QuantScreeningExpression.class.equals(Float.class) || QuantScreeningExpression.class.equals(Double.class) || QuantScreeningExpression.class.equals(Boolean.class) || QuantScreeningExpression.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((QuantScreeningExpression.class.equals(Integer.class) || QuantScreeningExpression.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((QuantScreeningExpression.class.equals(Float.class) || QuantScreeningExpression.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (QuantScreeningExpression.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (QuantScreeningExpression.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(QuantScreeningExpression.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'QuantScreeningExpression'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'QuantScreeningExpression'", e);
            }

            // deserialize QuantUniversalScreenParameter
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (QuantUniversalScreenParameter.class.equals(Integer.class) || QuantUniversalScreenParameter.class.equals(Long.class) || QuantUniversalScreenParameter.class.equals(Float.class) || QuantUniversalScreenParameter.class.equals(Double.class) || QuantUniversalScreenParameter.class.equals(Boolean.class) || QuantUniversalScreenParameter.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((QuantUniversalScreenParameter.class.equals(Integer.class) || QuantUniversalScreenParameter.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((QuantUniversalScreenParameter.class.equals(Float.class) || QuantUniversalScreenParameter.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (QuantUniversalScreenParameter.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (QuantUniversalScreenParameter.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(QuantUniversalScreenParameter.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'QuantUniversalScreenParameter'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'QuantUniversalScreenParameter'", e);
            }

            if (match == 1) {
                OneOfQuantFormulas ret = new OneOfQuantFormulas();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for OneOfQuantFormulas: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public OneOfQuantFormulas getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "OneOfQuantFormulas cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public OneOfQuantFormulas() {
        super("oneOf", Boolean.FALSE);
    }

    public OneOfQuantFormulas(QuantAllUniversalScreenParameters o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OneOfQuantFormulas(QuantFqlExpression o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OneOfQuantFormulas(QuantScreeningExpression o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public OneOfQuantFormulas(QuantUniversalScreenParameter o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("QuantAllUniversalScreenParameters", new GenericType<QuantAllUniversalScreenParameters>() {
        });
        schemas.put("QuantFqlExpression", new GenericType<QuantFqlExpression>() {
        });
        schemas.put("QuantScreeningExpression", new GenericType<QuantScreeningExpression>() {
        });
        schemas.put("QuantUniversalScreenParameter", new GenericType<QuantUniversalScreenParameter>() {
        });
        JSON.registerDescendants(OneOfQuantFormulas.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("AllUniversalScreenParameters", QuantAllUniversalScreenParameters.class);
        mappings.put("FqlExpression", QuantFqlExpression.class);
        mappings.put("QuantAllUniversalScreenParameters", QuantAllUniversalScreenParameters.class);
        mappings.put("QuantFqlExpression", QuantFqlExpression.class);
        mappings.put("QuantScreeningExpression", QuantScreeningExpression.class);
        mappings.put("QuantUniversalScreenParameter", QuantUniversalScreenParameter.class);
        mappings.put("ScreeningExpression", QuantScreeningExpression.class);
        mappings.put("UniversalScreenParameter", QuantUniversalScreenParameter.class);
        mappings.put("OneOfQuantFormulas", OneOfQuantFormulas.class);
        JSON.registerDiscriminator(OneOfQuantFormulas.class, "source", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return OneOfQuantFormulas.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * QuantAllUniversalScreenParameters, QuantFqlExpression, QuantScreeningExpression, QuantUniversalScreenParameter
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(QuantAllUniversalScreenParameters.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(QuantFqlExpression.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(QuantScreeningExpression.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(QuantUniversalScreenParameter.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be QuantAllUniversalScreenParameters, QuantFqlExpression, QuantScreeningExpression, QuantUniversalScreenParameter");
    }

    /**
     * Get the actual instance, which can be the following:
     * QuantAllUniversalScreenParameters, QuantFqlExpression, QuantScreeningExpression, QuantUniversalScreenParameter
     *
     * @return The actual instance (QuantAllUniversalScreenParameters, QuantFqlExpression, QuantScreeningExpression, QuantUniversalScreenParameter)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuantAllUniversalScreenParameters`. If the actual instanct is not `QuantAllUniversalScreenParameters`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuantAllUniversalScreenParameters`
     * @throws ClassCastException if the instance is not `QuantAllUniversalScreenParameters`
     */
    public QuantAllUniversalScreenParameters getQuantAllUniversalScreenParameters() throws ClassCastException {
        return (QuantAllUniversalScreenParameters)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuantFqlExpression`. If the actual instanct is not `QuantFqlExpression`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuantFqlExpression`
     * @throws ClassCastException if the instance is not `QuantFqlExpression`
     */
    public QuantFqlExpression getQuantFqlExpression() throws ClassCastException {
        return (QuantFqlExpression)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuantScreeningExpression`. If the actual instanct is not `QuantScreeningExpression`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuantScreeningExpression`
     * @throws ClassCastException if the instance is not `QuantScreeningExpression`
     */
    public QuantScreeningExpression getQuantScreeningExpression() throws ClassCastException {
        return (QuantScreeningExpression)super.getActualInstance();
    }

    /**
     * Get the actual instance of `QuantUniversalScreenParameter`. If the actual instanct is not `QuantUniversalScreenParameter`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `QuantUniversalScreenParameter`
     * @throws ClassCastException if the instance is not `QuantUniversalScreenParameter`
     */
    public QuantUniversalScreenParameter getQuantUniversalScreenParameter() throws ClassCastException {
        return (QuantUniversalScreenParameter)super.getActualInstance();
    }

}
