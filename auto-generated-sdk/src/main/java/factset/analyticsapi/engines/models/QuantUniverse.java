/*
 * Engines API
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: analytics.api.support@factset.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package factset.analyticsapi.engines.models;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import factset.analyticsapi.engines.models.QuantIdentifierUniverse;
import factset.analyticsapi.engines.models.QuantScreeningExpressionUniverse;
import factset.analyticsapi.engines.models.QuantUniversalScreenUniverse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import factset.analyticsapi.engines.JSON;


/**
 * QuantUniverse
 */
@JsonPropertyOrder({
  QuantUniverse.JSON_PROPERTY_$_TYPE,
  QuantUniverse.JSON_PROPERTY_SOURCE
})
@javax.annotation.Generated(value = "CustomJavaClientCodegen")
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "$type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = QuantIdentifierUniverse.class, name = "QuantIdentifierUniverse"),
  @JsonSubTypes.Type(value = QuantScreeningExpressionUniverse.class, name = "QuantScreeningExpressionUniverse"),
  @JsonSubTypes.Type(value = QuantUniversalScreenUniverse.class, name = "QuantUniversalScreenUniverse"),
})

public class QuantUniverse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_$_TYPE = "$type";
  private String $type;

  /**
   * Gets or Sets source
   */
  public enum SourceEnum {
    SCREENINGEXPRESSIONUNIVERSE("ScreeningExpressionUniverse"),
    
    UNIVERSALSCREENUNIVERSE("UniversalScreenUniverse"),
    
    IDENTIFIERUNIVERSE("IdentifierUniverse");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE = "source";
  private SourceEnum source;


  public QuantUniverse $type(String $type) {
    this.$type = $type;
    return this;
  }

   /**
   * Get $type
   * @return $type
  **/
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_$_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String get$Type() {
    return $type;
  }


  public void set$Type(String $type) {
    this.$type = $type;
  }


  public QuantUniverse source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceEnum getSource() {
    return source;
  }


  public void setSource(SourceEnum source) {
    this.source = source;
  }


  /**
   * Return true if this QuantUniverse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuantUniverse quantUniverse = (QuantUniverse) o;
    return Objects.equals(this.$type, quantUniverse.$type) &&
        Objects.equals(this.source, quantUniverse.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash($type, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuantUniverse {\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

static {
  // Initialize and register the discriminator mappings.
  Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
  mappings.put("QuantIdentifierUniverse", QuantIdentifierUniverse.class);
  mappings.put("QuantScreeningExpressionUniverse", QuantScreeningExpressionUniverse.class);
  mappings.put("QuantUniversalScreenUniverse", QuantUniversalScreenUniverse.class);
  mappings.put("QuantUniverse", QuantUniverse.class);
  JSON.registerDiscriminator(QuantUniverse.class, "$type", mappings);
}
}

